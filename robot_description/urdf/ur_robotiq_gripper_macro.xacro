<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro">
  <!--
    Base UR robot series xacro macro.

    NOTE this is NOT a URDF. It cannot directly be loaded by consumers
    expecting a flattened '.urdf' file. See the top-level '.xacro' for that
    (but note that .xacro must still be processed by the xacro command).

    This file models the base kinematic chain of a UR robot, which then gets
    parameterised by various configuration files to convert it into a UR3(e),
    UR5(e), UR10(e) or UR16e.

    NOTE the default kinematic parameters (i.e., link lengths, frame locations,
    offsets, etc) do not correspond to any particular robot. They are defaults
    only. There WILL be non-zero offsets between the Forward Kinematics results
    in TF (i.e., robot_state_publisher) and the values reported by the Teach
    Pendant.

    For accurate (and robot-specific) transforms, the 'kinematics_parameters_file'
    parameter MUST point to a .yaml file containing the appropriate values for
    the targeted robot.

    If using the UniversalRobots/Universal_Robots_ROS_Driver, follow the steps
    described in the readme of that repository to extract the kinematic
    calibration from the controller and generate the required .yaml file.

    Main author of the migration to yaml configs Ludovic Delval.

    Contributors to previous versions (in no particular order)

     - Denis Stogl
     - Lovro Ivanov
     - Felix Messmer
     - Kelsey Hawkins
     - Wim Meeussen
     - Shaun Edwards
     - Nadia Hammoudeh Garcia
     - Dave Hershberger
     - G. vd. Hoorn
     - Philip Long
     - Dave Coleman
     - Miguel Prada
     - Mathias Luedtke
     - Marcel Schnirring
     - Felix von Drigalski
     - Felix Exner
     - Jimmy Da Silva
     - Ajit Krisshna N L
     - Muhammad Asif Rana
  -->

  <xacro:include filename="$(find ur_description)/urdf/inc/ur_common.xacro" />

  <xacro:macro name="ur_robot"
    params="
    name
    tf_prefix
    parent
    *origin
    joint_limits_parameters_file
    kinematics_parameters_file
    physical_parameters_file
    visual_parameters_file
    safety_limits:=false
    safety_pos_margin:=0.15
    safety_k_position:=20
    force_abs_paths:=false
    ">

    <!-- Load configuration data from the provided .yaml files -->
    <xacro:read_model_data
      joint_limits_parameters_file="${joint_limits_parameters_file}"
      kinematics_parameters_file="${kinematics_parameters_file}"
      physical_parameters_file="${physical_parameters_file}"
      visual_parameters_file="${visual_parameters_file}"
      force_abs_paths="${force_abs_paths}" />

    <!-- links -  main serial chain -->
    <link name="${tf_prefix}base_link" />
    <link name="${tf_prefix}base_link_inertia">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${pi}" />
        <geometry>
          <xacro:get_mesh name="base" type="visual" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 ${pi}" />
        <geometry>
          <xacro:get_mesh name="base" type="collision" />
        </geometry>
      </collision>
      <xacro:cylinder_inertial radius="${base_inertia_radius}" length="${base_inertia_length}"
        mass="${base_mass}">
        <origin xyz="0 0 0" rpy="0 0 0" />
      </xacro:cylinder_inertial>
    </link>
    <link name="${tf_prefix}shoulder_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${pi}" />
        <geometry>
          <xacro:get_mesh name="shoulder" type="visual" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 ${pi}" />
        <geometry>
          <xacro:get_mesh name="shoulder" type="collision" />
        </geometry>
      </collision>
      <inertial>
        <mass value="${shoulder_mass}" />
        <origin rpy="${shoulder_inertia_rotation}" xyz="${shoulder_cog}" />
        <inertia
          ixx="${shoulder_inertia_ixx}"
          ixy="${shoulder_inertia_ixy}"
          ixz="${shoulder_inertia_ixz}"
          iyy="${shoulder_inertia_iyy}"
          iyz="${shoulder_inertia_iyz}"
          izz="${shoulder_inertia_izz}"
        />
      </inertial>
    </link>
    <link name="${tf_prefix}upper_arm_link">
      <visual>
        <origin xyz="0 0 ${shoulder_offset}" rpy="${pi/2} 0 ${-pi/2}" />
        <geometry>
          <xacro:get_mesh name="upper_arm" type="visual" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 ${shoulder_offset}" rpy="${pi/2} 0 ${-pi/2}" />
        <geometry>
          <xacro:get_mesh name="upper_arm" type="collision" />
        </geometry>
      </collision>
      <inertial>
        <mass value="${upper_arm_mass}" />
        <origin rpy="${upper_arm_inertia_rotation}" xyz="${upper_arm_cog}" />
        <inertia
          ixx="${upper_arm_inertia_ixx}"
          ixy="${upper_arm_inertia_ixy}"
          ixz="${upper_arm_inertia_ixz}"
          iyy="${upper_arm_inertia_iyy}"
          iyz="${upper_arm_inertia_iyz}"
          izz="${upper_arm_inertia_izz}"
        />
      </inertial>
    </link>
    <link name="${tf_prefix}forearm_link">
      <visual>
        <origin xyz="0 0 ${elbow_offset}" rpy="${pi/2} 0 ${-pi/2}" />
        <geometry>
          <xacro:get_mesh name="forearm" type="visual" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 ${elbow_offset}" rpy="${pi/2} 0 ${-pi/2}" />
        <geometry>
          <xacro:get_mesh name="forearm" type="collision" />
        </geometry>
      </collision>
      <inertial>
        <mass value="${forearm_mass}" />
        <origin rpy="${forearm_inertia_rotation}" xyz="${forearm_cog}" />
        <inertia
          ixx="${forearm_inertia_ixx}"
          ixy="${forearm_inertia_ixy}"
          ixz="${forearm_inertia_ixz}"
          iyy="${forearm_inertia_iyy}"
          iyz="${forearm_inertia_iyz}"
          izz="${forearm_inertia_izz}"
        />
      </inertial>
    </link>
    <link name="${tf_prefix}wrist_1_link">
      <xacro:get_visual_params name="wrist_1" type="visual_offset" />
      <visual>
        <origin xyz="0 0 ${visual_params}" rpy="${pi/2} 0 0" />
        <geometry>
          <xacro:get_mesh name="wrist_1" type="visual" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 ${visual_params}" rpy="${pi/2} 0 0" />
        <geometry>
          <xacro:get_mesh name="wrist_1" type="collision" />
        </geometry>
      </collision>
      <inertial>
        <mass value="${wrist_1_mass}" />
        <origin rpy="${wrist_1_inertia_rotation}" xyz="${wrist_1_cog}" />
        <inertia
          ixx="${wrist_1_inertia_ixx}"
          ixy="${wrist_1_inertia_ixy}"
          ixz="${wrist_1_inertia_ixz}"
          iyy="${wrist_1_inertia_iyy}"
          iyz="${wrist_1_inertia_iyz}"
          izz="${wrist_1_inertia_izz}"
        />
      </inertial>
    </link>
    <link name="${tf_prefix}wrist_2_link">
      <xacro:get_visual_params name="wrist_2" type="visual_offset" />
      <visual>
        <origin xyz="0 0 ${visual_params}" rpy="0 0 0" />
        <geometry>
          <xacro:get_mesh name="wrist_2" type="visual" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 ${visual_params}" rpy="0 0 0" />
        <geometry>
          <xacro:get_mesh name="wrist_2" type="collision" />
        </geometry>
      </collision>
      <inertial>
        <mass value="${wrist_2_mass}" />
        <origin rpy="${wrist_2_inertia_rotation}" xyz="${wrist_2_cog}" />
        <inertia
          ixx="${wrist_2_inertia_ixx}"
          ixy="${wrist_2_inertia_ixy}"
          ixz="${wrist_2_inertia_ixz}"
          iyy="${wrist_2_inertia_iyy}"
          iyz="${wrist_2_inertia_iyz}"
          izz="${wrist_2_inertia_izz}"
        />
      </inertial>
    </link>
    <link name="${tf_prefix}wrist_3_link">
      <xacro:get_visual_params name="wrist_3" type="visual_offset" />
      <visual>
        <origin xyz="0 0 ${visual_params}" rpy="${pi/2} 0 0" />
        <geometry>
          <xacro:get_mesh name="wrist_3" type="visual" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 ${visual_params}" rpy="${pi/2} 0 0" />
        <geometry>
          <xacro:get_mesh name="wrist_3" type="collision" />
        </geometry>
      </collision>
      <inertial>
        <mass value="${wrist_3_mass}" />
        <origin rpy="${wrist_3_inertia_rotation}" xyz="${wrist_3_cog}" />
        <inertia
          ixx="${wrist_3_inertia_ixx}"
          ixy="${wrist_3_inertia_ixy}"
          ixz="${wrist_3_inertia_ixz}"
          iyy="${wrist_3_inertia_iyy}"
          iyz="${wrist_3_inertia_iyz}"
          izz="${wrist_3_inertia_izz}"
        />
      </inertial>
    </link>

    <!-- base_joint fixes base_link to the environment -->
    <joint name="${tf_prefix}base_joint" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="${parent}" />
      <child link="${tf_prefix}base_link" />
    </joint>

    <!-- joints - main serial chain -->
    <joint name="${tf_prefix}base_link-base_link_inertia" type="fixed">
      <parent link="${tf_prefix}base_link" />
      <child link="${tf_prefix}base_link_inertia" />
      <!-- 'base_link' is REP-103 aligned (so X+ forward), while the internal
           frames of the robot/controller have X+ pointing backwards.
           Use the joint between 'base_link' and 'base_link_inertia' (a dummy
           link/frame) to introduce the necessary rotation over Z (of pi rad).
      -->
      <origin xyz="0 0 0" rpy="0 0 ${pi}" />
    </joint>
    <joint name="${tf_prefix}shoulder_pan_joint" type="revolute">
      <parent link="${tf_prefix}base_link_inertia" />
      <child link="${tf_prefix}shoulder_link" />
      <origin xyz="${shoulder_x} ${shoulder_y} ${shoulder_z}"
        rpy="${shoulder_roll} ${shoulder_pitch} ${shoulder_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${shoulder_pan_lower_limit}" upper="${shoulder_pan_upper_limit}"
        effort="${shoulder_pan_effort_limit}" velocity="${shoulder_pan_velocity_limit}" />
      <xacro:if value="${safety_limits}">
        <safety_controller soft_lower_limit="${shoulder_pan_lower_limit + safety_pos_margin}"
          soft_upper_limit="${shoulder_pan_upper_limit - safety_pos_margin}"
          k_position="${safety_k_position}" k_velocity="0.0" />
      </xacro:if>
      <dynamics damping="0" friction="0" />
    </joint>
    <joint name="${tf_prefix}shoulder_lift_joint" type="revolute">
      <parent link="${tf_prefix}shoulder_link" />
      <child link="${tf_prefix}upper_arm_link" />
      <origin xyz="${upper_arm_x} ${upper_arm_y} ${upper_arm_z}"
        rpy="${upper_arm_roll} ${upper_arm_pitch} ${upper_arm_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${shoulder_lift_lower_limit}" upper="${shoulder_lift_upper_limit}"
        effort="${shoulder_lift_effort_limit}" velocity="${shoulder_lift_velocity_limit}" />
      <xacro:if value="${safety_limits}">
        <safety_controller soft_lower_limit="${shoulder_lift_lower_limit + safety_pos_margin}"
          soft_upper_limit="${shoulder_lift_upper_limit - safety_pos_margin}"
          k_position="${safety_k_position}" k_velocity="0.0" />
      </xacro:if>
      <dynamics damping="0" friction="0" />
    </joint>
    <joint name="${tf_prefix}elbow_joint" type="revolute">
      <parent link="${tf_prefix}upper_arm_link" />
      <child link="${tf_prefix}forearm_link" />
      <origin xyz="${forearm_x} ${forearm_y} ${forearm_z}"
        rpy="${forearm_roll} ${forearm_pitch} ${forearm_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${elbow_joint_lower_limit}" upper="${elbow_joint_upper_limit}"
        effort="${elbow_joint_effort_limit}" velocity="${elbow_joint_velocity_limit}" />
      <xacro:if value="${safety_limits}">
        <safety_controller soft_lower_limit="${elbow_joint_lower_limit + safety_pos_margin}"
          soft_upper_limit="${elbow_joint_upper_limit - safety_pos_margin}"
          k_position="${safety_k_position}" k_velocity="0.0" />
      </xacro:if>
      <dynamics damping="0" friction="0" />
    </joint>
    <joint name="${tf_prefix}wrist_1_joint" type="revolute">
      <parent link="${tf_prefix}forearm_link" />
      <child link="${tf_prefix}wrist_1_link" />
      <origin xyz="${wrist_1_x} ${wrist_1_y} ${wrist_1_z}"
        rpy="${wrist_1_roll} ${wrist_1_pitch} ${wrist_1_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${wrist_1_lower_limit}" upper="${wrist_1_upper_limit}"
        effort="${wrist_1_effort_limit}" velocity="${wrist_1_velocity_limit}" />
      <xacro:if value="${safety_limits}">
        <safety_controller soft_lower_limit="${wrist_1_lower_limit + safety_pos_margin}"
          soft_upper_limit="${wrist_1_upper_limit - safety_pos_margin}"
          k_position="${safety_k_position}" k_velocity="0.0" />
      </xacro:if>
      <dynamics damping="0" friction="0" />
    </joint>
    <joint name="${tf_prefix}wrist_2_joint" type="revolute">
      <parent link="${tf_prefix}wrist_1_link" />
      <child link="${tf_prefix}wrist_2_link" />
      <origin xyz="${wrist_2_x} ${wrist_2_y} ${wrist_2_z}"
        rpy="${wrist_2_roll} ${wrist_2_pitch} ${wrist_2_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${wrist_2_lower_limit}" upper="${wrist_2_upper_limit}"
        effort="${wrist_2_effort_limit}" velocity="${wrist_2_velocity_limit}" />
      <xacro:if value="${safety_limits}">
        <safety_controller soft_lower_limit="${wrist_2_lower_limit + safety_pos_margin}"
          soft_upper_limit="${wrist_2_upper_limit - safety_pos_margin}"
          k_position="${safety_k_position}" k_velocity="0.0" />
      </xacro:if>
      <dynamics damping="0" friction="0" />
    </joint>
    <joint name="${tf_prefix}wrist_3_joint" type="${wrist_3_joint_type}">
      <parent link="${tf_prefix}wrist_2_link" />
      <child link="${tf_prefix}wrist_3_link" />
      <origin xyz="${wrist_3_x} ${wrist_3_y} ${wrist_3_z}"
        rpy="${wrist_3_roll} ${wrist_3_pitch} ${wrist_3_yaw}" />
      <axis xyz="0 0 1" />
      <xacro:if value="${wrist_3_joint_type != 'continuous'}">
        <limit lower="${wrist_3_lower_limit}" upper="${wrist_3_upper_limit}"
          effort="${wrist_3_effort_limit}" velocity="${wrist_3_velocity_limit}" />
        <xacro:if value="${safety_limits}">
          <safety_controller soft_lower_limit="${wrist_3_lower_limit + safety_pos_margin}"
            soft_upper_limit="${wrist_3_upper_limit - safety_pos_margin}"
            k_position="${safety_k_position}" k_velocity="0.0" />
        </xacro:if>
      </xacro:if>
      <xacro:unless value="${wrist_3_joint_type != 'continuous'}">
        <limit effort="${wrist_3_effort_limit}" velocity="${wrist_3_velocity_limit}" />
        <xacro:if value="${safety_limits}">
          <safety_controller k_position="${safety_k_position}" k_velocity="0.0" />
        </xacro:if>
      </xacro:unless>
      <dynamics damping="0" friction="0" />
    </joint>

    <link name="${tf_prefix}ft_frame" />
    <joint name="${tf_prefix}wrist_3_link-ft_frame" type="fixed">
      <parent link="${tf_prefix}wrist_3_link" />
      <child link="${tf_prefix}ft_frame" />
      <origin xyz="0 0 0" rpy="${pi} 0 0" />
    </joint>

    <!-- ROS-Industrial 'base' frame - base_link to UR 'Base' Coordinates transform -->
    <link name="${tf_prefix}base" />
    <joint name="${tf_prefix}base_link-base_fixed_joint" type="fixed">
      <!-- Note the rotation over Z of pi radians - as base_link is REP-103
           aligned (i.e., has X+ forward, Y+ left and Z+ up), this is needed
           to correctly align 'base' with the 'Base' coordinate system of
           the UR controller.
      -->
      <origin xyz="0 0 0" rpy="0 0 ${pi}" />
      <parent link="${tf_prefix}base_link" />
      <child link="${tf_prefix}base" />
    </joint>

    <!-- ROS-Industrial 'flange' frame - attachment point for EEF models -->
    <link name="${tf_prefix}flange" />
    <joint name="${tf_prefix}wrist_3-flange" type="fixed">
      <parent link="${tf_prefix}wrist_3_link" />
      <child link="${tf_prefix}flange" />
      <origin xyz="0 0 0" rpy="0 ${-pi/2.0} ${-pi/2.0}" />
    </joint>

    <!-- ROS-Industrial 'tool0' frame - all-zeros tool frame -->
    <link name="${tf_prefix}tool0" />
    <joint name="${tf_prefix}flange-tool0" type="fixed">
      <!-- default toolframe - X+ left, Y+ up, Z+ front -->
      <origin xyz="0 0 0" rpy="${pi/2.0} 0 ${pi/2.0}" />
      <parent link="${tf_prefix}flange" />
      <child link="${tf_prefix}tool0" />
    </joint>


    <joint name="${tf_prefix}ur_to_robotiq_joint" type="fixed">
      <!-- The parent link must be read from the robot model it is attached to. -->
      <parent link="${tf_prefix}tool0" />
      <child link="${tf_prefix}ur_to_robotiq_link" />
      <origin xyz="0 0 0" rpy="0 0 0" />
    </joint>

    <link name="${tf_prefix}ur_to_robotiq_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh
            filename="package://robotiq_description/meshes/visual/2f_85/ur_to_robotiq_adapter.dae" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh
            filename="package://robotiq_description/meshes/collision/2f_85/ur_to_robotiq_adapter.stl" />
        </geometry>
      </collision>
      <inertial>
        <mass value="0.01" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.000044" ixy="0.0" ixz="0.0" iyy="0.000027" iyz="0.0" izz="0.000027" />
      </inertial>
    </link>

    <joint name="${tf_prefix}gripper_side_joint" type="fixed">
      <parent link="${tf_prefix}ur_to_robotiq_link" />
      <child link="${tf_prefix}robotiq_85_base_link" />
      <!-- <origin xyz="0.5 0 0.5" rpy="0 ${-pi/2} ${pi/2}" /> -->
      <origin xyz="0 0 0.011" rpy="0 0 0" /> 
    </joint>


    <link name="${tf_prefix}robotiq_85_base_link">
      <visual>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/visual/2f_85/robotiq_base.dae" />
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/collision/2f_85/robotiq_base.stl" />
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0.0 2.274e-05 0.03232288" rpy="0 0 0" />
        <mass value="6.6320197e-01" />
        <inertia ixx="5.1617816e-04" iyy="5.8802208e-04" izz="3.9462776e-04" ixy="2.936e-8"
          ixz="0.0" iyz="-3.2296e-7" /> 
      </inertial>
    </link>

    <link name="${tf_prefix}robotiq_85_left_knuckle_link">
      <visual>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/visual/2f_85/left_knuckle.dae" />
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/collision/2f_85/left_knuckle.stl" />
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0.01213197 0.0002 -0.00058647" rpy="0 0 0" />
        <mass value="1.384773208e-02" />
        <inertia ixx="3.5232e-7" iyy="2.31944e-6" izz="2.23136e-6" ixy="0.0" ixz="1.1744e-7" iyz="0" />
      </inertial>
    </link>

    <link name="${tf_prefix}robotiq_85_right_knuckle_link">
      <visual>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/visual/2f_85/right_knuckle.dae" />
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/collision/2f_85/right_knuckle.stl" />
        </geometry>
      </collision>
      <inertial>
        <origin xyz="-0.01213197 0.0002 -0.00058647" rpy="0 0 0" />
        <mass value="1.384773208e-02" />
        <inertia ixx="3.5232e-7" iyy="2.31944e-6" izz="2.23136e-6" ixy="0.0" ixz="-1.1744e-7"
          iyz="0.0" />
      </inertial>
    </link>

    <link name="${tf_prefix}robotiq_85_left_finger_link">
      <visual>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/visual/2f_85/left_finger.dae" />
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/collision/2f_85/left_finger.stl" />
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0.00346899 -0.00079447 0.01867121" rpy="0 0 0" />
        <mass value="4.260376752e-02" />
        <inertia ixx="1.385792000000000e-05" iyy="1.183208e-05" izz="5.19672e-06" ixy="0.0"
          ixz="-2.17264e-06" iyz="0.0" />
      </inertial>
    </link>

    <link name="${tf_prefix}robotiq_85_right_finger_link">
      <visual>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/visual/2f_85/right_finger.dae" />
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/collision/2f_85/right_finger.stl" />
        </geometry>
      </collision>
      <inertial>
        <origin xyz="-0.00346899 -5.53e-06 0.01867121" rpy="0 0 0" />
        <mass value="4.260376752000000e-02" />
        <inertia ixx="1.385792e-05" iyy="1.183208e-05" izz="5.19672e-06" ixy="0.0" ixz="2.17264e-06"
          iyz="0.0" />
      </inertial>
    </link>

    <link name="${tf_prefix}robotiq_85_left_inner_knuckle_link">
      <visual>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/visual/2f_85/left_inner_knuckle.dae" />
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh
            filename="package://robotiq_description/meshes/collision/2f_85/left_inner_knuckle.stl" />
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0.01897699 0.00015001 0.02247101" rpy="0 0 0" />
        <mass value="2.969376448e-02" />
        <inertia ixx="9.57136e-06" iyy="8.69056e-06" izz="8.19144e-06" ixy="0.0" ixz="-3.93424e-06"
          iyz="0.0" />
      </inertial>
    </link>

    <link name="${tf_prefix}robotiq_85_right_inner_knuckle_link">
      <visual>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/visual/2f_85/right_inner_knuckle.dae" />
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh
            filename="package://robotiq_description/meshes/collision/2f_85/right_inner_knuckle.stl" />
        </geometry>
      </collision>
      <inertial>
        <origin xyz="-0.01926824 5.001e-05 0.02222178" rpy="0 0 0" />
        <mass value="2.969376448e-02" />
        <inertia ixx="9.42456e-06" iyy="8.69056e-06" izz="8.33824e-06" ixy="0.0" ixz="3.9636e-06"
          iyz="0.0" />
      </inertial>
    </link>

    <link name="${tf_prefix}robotiq_85_left_finger_tip_link">
      <visual>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/visual/2f_85/left_finger_tip.dae" />
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/collision/2f_85/left_finger_tip.stl" />
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu1>100000.0</mu1>
              <mu2>100000.0</mu2>
            </ode>
          </friction>
          <contact>
            <ode>
              <kp>1e+5</kp>
              <kd>1</kd>
              <soft_cfm>0</soft_cfm>
              <soft_erp>0.2</soft_erp>
              <minDepth>0.002</minDepth>
              <maxVel>0</maxVel>
            </ode>
          </contact>
        </surface>
      </collision>
      <inertial>
        <origin xyz="-0.01456706 -0.0008 0.01649701" rpy="0 0 0" />
        <mass value="4.268588744e-02" />
        <inertia ixx="1.048152e-05" iyy="1.197888e-05" izz="4.22784e-06" ixy="0.0" ixz="3.5232e-6"
          iyz="0.0" />
      </inertial>
    </link>

    <link name="${tf_prefix}robotiq_85_right_finger_tip_link">
      <visual>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/visual/2f_85/right_finger_tip.dae" />
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh filename="package://robotiq_description/meshes/collision/2f_85/right_finger_tip.stl" />
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu1>100000.0</mu1>
              <mu2>100000.0</mu2>
            </ode>
          </friction>
          <contact>
            <ode>
              <kp>1e+5</kp>
              <kd>1</kd>
              <soft_cfm>0</soft_cfm>
              <soft_erp>0.2</soft_erp>
              <minDepth>0.002</minDepth>
              <maxVel>0</maxVel>
            </ode>
          </contact>
        </surface>
      </collision>
      <inertial>
        <origin xyz="0.01456706 5e-05 0.01649701" rpy="0 0 0" />
        <mass value="4.268588744e-02" />
        <inertia ixx="1.048152e-05" iyy="1.197888e-05" izz="4.22784e-06" ixy="0.0" ixz="-3.5232e-06"
          iyz="0.0" />
      </inertial>
    </link>



    <joint name="${tf_prefix}robotiq_85_left_knuckle_joint" type="revolute">
      <parent link="${tf_prefix}robotiq_85_base_link" />
      <child link="${tf_prefix}robotiq_85_left_knuckle_link" />
      <axis xyz="0 -1 0" />
      <origin xyz="0.03060114 0.0 0.05490452" rpy="0 0 0" />
      <limit lower="0.0" upper="0.8" velocity="0.5" effort="50" />
    </joint>

    <joint name="${tf_prefix}robotiq_85_right_knuckle_joint" type="revolute">
      <parent link="${tf_prefix}robotiq_85_base_link" />
      <child link="${tf_prefix}robotiq_85_right_knuckle_link" />
      <axis xyz="0 -1 0" />
      <origin xyz="-0.03060114 0.0 0.05490452" rpy="0 0 0" />
      <limit lower="-0.8" upper="0.0" velocity="0.5" effort="50" />
      <mimic joint="${tf_prefix}robotiq_85_left_knuckle_joint" multiplier="-1" />
    </joint>

    <joint name="${tf_prefix}robotiq_85_left_finger_joint" type="fixed">
      <parent link="${tf_prefix}robotiq_85_left_knuckle_link" />
      <child link="${tf_prefix}robotiq_85_left_finger_link" />
      <origin xyz="0.03152616 0.0 -0.00376347" rpy="0 0 0" />
    </joint>

    <joint name="${tf_prefix}robotiq_85_right_finger_joint" type="fixed">
      <parent link="${tf_prefix}robotiq_85_right_knuckle_link" />
      <child link="${tf_prefix}robotiq_85_right_finger_link" />
      <origin xyz="-0.03152616 0.0 -0.00376347" rpy="0 0 0" />
    </joint>

    <joint name="${tf_prefix}robotiq_85_left_inner_knuckle_joint" type="continuous">
      <parent link="${tf_prefix}robotiq_85_base_link" />
      <child link="${tf_prefix}robotiq_85_left_inner_knuckle_link" />
      <axis xyz="0 -1 0" />
      <origin xyz="0.0127 0.0 0.06142" rpy="0 0 0" />
      <mimic joint="${tf_prefix}robotiq_85_left_knuckle_joint" />
    </joint>

    <joint name="${tf_prefix}robotiq_85_right_inner_knuckle_joint" type="continuous">
      <parent link="${tf_prefix}robotiq_85_base_link" />
      <child link="${tf_prefix}robotiq_85_right_inner_knuckle_link" />
      <axis xyz="0 -1 0" />
      <origin xyz="-0.0127 0.0 0.06142" rpy="0 0 0" />
      <mimic joint="${tf_prefix}robotiq_85_left_knuckle_joint" multiplier="-1" />
    </joint>

    <joint name="${tf_prefix}robotiq_85_left_finger_tip_joint" type="continuous">
      <parent link="${tf_prefix}robotiq_85_left_finger_link" />
      <child link="${tf_prefix}robotiq_85_left_finger_tip_link" />
      <axis xyz="0 -1 0" />
      <origin xyz="0.00563134 0.0 0.04718515" rpy="0 0 0" />
      <mimic joint="${tf_prefix}robotiq_85_left_knuckle_joint" multiplier="-1" />
    </joint>

    <joint name="${tf_prefix}robotiq_85_right_finger_tip_joint" type="continuous">
      <parent link="${tf_prefix}robotiq_85_right_finger_link" />
      <child link="${tf_prefix}robotiq_85_right_finger_tip_link" />
      <axis xyz="0 -1 0" />
      <origin xyz="-0.00563134 0.0 0.04718515" rpy="0 0 0" />
      <mimic joint="${tf_prefix}robotiq_85_left_knuckle_joint" />
    </joint>
  </xacro:macro>
</robot>